# Create "TF_X" variables for Terraform
variables:
  TF_ROOT: ${CI_PROJECT_DIR}
  TF_STATE_NAME: default

# Create a cache for Terraform
cache:
  key: "${TF_ROOT}"
  paths:
    - ${TF_ROOT}/.terraform/

# Define the image for Terraform jobs
image:
  name: "$CI_TEMPLATE_REGISTRY_HOST/gitlab-org/terraform-images/releases/1.4:v1.0.0"

stages:
  - validate
  - build
  - deploy
  - cleanup

# Verify that the build is error-free
npm_run:
  stage: validate
  image: node:lts-alpine
  script:
    - cd app/
    - npm install
    - npm run build

# Validate the Terraform configuration
terraform_validate:
  stage: validate
  script:
    - gitlab-terraform validate

# Build the Docker image and push it to ECR
#  This job can be run manually 
#  or if $DOCKER_IMAGE_AUTO_DEPLOY is set to "true", the image will be automatically deployed to ECR 
#  each time a commit is made to the default branch
docker_build_image:
  stage: build
  image: docker:stable
  needs: [npm_run]
  services:
    - docker:dind
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip3 install awscli
    - aws ecr get-login-password --region $TF_VAR_region |
      docker login --username AWS --password-stdin $TF_VAR_accountID.dkr.ecr.$TF_VAR_region.amazonaws.com
  script:
    - docker build -t $TF_VAR_imageURL .
    - docker push $TF_VAR_imageURL
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $DOCKER_IMAGE_AUTO_DEPLOY == "true"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual

# Generate a Terraform plan and save it to cache
terraform_build:
  stage: build
  needs: [terraform_validate]
  environment:
    name: $TF_STATE_NAME
    action: prepare
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  resource_group: ${TF_STATE_NAME}
  artifacts:
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

# Deploy the Terraform plan
#  This job can be run manually 
#  or if $TF_AUTO_DEPLOY is set to "true", the plan will be automatically deployed 
#  each time a commit is made to the default branch
terraform_deploy:
  stage: deploy
  needs: [terraform_build]
  environment:
    name: $TF_STATE_NAME
    action: start
  script:
    - gitlab-terraform apply
  resource_group: ${TF_STATE_NAME}
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $TF_AUTO_DEPLOY == "true"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual

# Destroy the Terraform resources
terraform_destroy:
  stage: cleanup
  needs: [terraform_deploy]
  environment:
    name: $TF_STATE_NAME
  script:
    - gitlab-terraform destroy
  resource_group: ${TF_STATE_NAME}
  when: manual
